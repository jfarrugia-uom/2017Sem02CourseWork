}
avg <- function(x) {
means <- c(0)
for (i:x) {
means <- c(means, mean(sample(population.weights, 10, replace=T) )
}
}
avg <- function(x) {
means <- c(0)
for (i:x) {
means <- c(means, mean(sample(population.weights, 10, replace=T)))
}
}
means <- c(0)
c(1,2,23)
avg <- function(x) {
means <- c()
for (i:x) {
means <- c(means, mean(sample(population.weights, 10, replace=T)))
}
}
avg <- function(x) {
means <- c()
for (1:x) {
means <- c(means, mean(sample(population.weights, 10, replace=T)))
}
}
avg <- function(x) {
means <- c()
for (1:x) {
means <- c(means, mean(sample(population.weights, 10, replace=T)))
}
}
avg <- function(x) {
means <- c()
for (1 in x) {
means <- c(means, mean(sample(population.weights, 10, replace=T)))
}
}
avg <- function(x) {
means <- c()
for (i in 1:x) {
means <-c(means, mean(sample(population.weights, 10, replace=T)))
}
}
avg <- function(x) {
means <- c()
for (i in 1:x) {
means <-c(means, mean(sample(population.weights, 10, replace=T)))
}
mean(means``)
}
avg <- function(x) {
means <- c()
for (i in 1:x) {
means <-c(means, mean(sample(population.weights, 10, replace=T)))
}
mean(means)
}
avg(10)
avg(1)
avg(10000)
sapply(1:1000, avg)
avg <- function(x) {
means <- c()
for (i in 1:x) {
means <-c(means, mean(sample(population.weights, 10, replace=T)))
}
mean(means)
}
# population of weights taken from normal distribution
population.weights <-rnorm(1000, 65, 6.5)
# sample from population
sapply(1:100, avg)
my_means <- sapply(1:100, avg)
df <- data.frame(attempt = 1:100, observed_average = my_means )
df
ggplot(df)
require(ggplot2)
library(ggplot)
library(ggplot2)
ggplot(df)
qplot(df)
qplot(df$attempt, df$observed_average, df)
qplot(df$attempt, df$observed_average, geom='line')
population.weights <-rnorm(1000, 65, 20)
my_means <- sapply(1:100, avg)
df <- data.frame(attempt = 1:100, observed_average = my_means )
qplot(df$attempt, df$observed_average, geom='line')
p5 <- ggplot(df, aes(x = attempt, y = observed_average))
p5
p5 <- ggplot(df, aes(x = attempt, y = observed_average))
p5 + geom_line()
p5 <- ggplot(df, aes(x = attempt, y = observed_average))
p5 + geom_line() + expland_limit(y=c(50, 80))
p5 <- ggplot(df, aes(x = attempt, y = observed_average))
p5 + geom_line() + expland_limits(y=c(50, 80))
p5 <- ggplot(df, aes(x = attempt, y = observed_average))
p5 + geom_line() + expand_limits(y=c(50, 80))
population.weights <-rnorm(10000, 65, 20)
my_means <- sapply(1:1000, avg)
df <- data.frame(attempt = 1:1000, observed_average = my_means )
p5 <- ggplot(df, aes(x = attempt, y = observed_average))
p5 + geom_line() + expand_limits(y=c(50, 80))
p5 + geom_line()
rep(sample(1:10, 5, replace=T), 10)
length(rep(sample(1:10, 5, replace=T), 10))
mean(rep(sample(1:10, 5, replace=T), 10))
mean(rep(sample(1:10, 5, replace=T), 10000))
mean(rep(sample(1:10, 5, replace=T), 10000))
mean(rep(sample(1:10, 5, replace=T), 10000))
mean(rep(sample(1:10, 5, replace=T), 10000))
mean(rep(sample(population.weights, 10, replace=T), 10000))
rep(sample(population.weights, 10, replace=T), 10000)
rep(sample(population.weights, 10, replace=T), 1)
rep(sample(population.weights, 10, replace=T), 1)
rep(sample(population.weights, 10, replace=T), 1)
sapply(rep(sample(population.weights, 10, replace=T), 1), mean)
sapply(rep(sample(population.weights, 10, replace=T), 2), mean)
avg <- function(x) {
means <- c()
for (i in 1:x) {
means <-c(means, mean(sample(population.weights, 10, replace=T)))
}
mean(means)
}
avg2 <- function(x) {
mean(rep(sample(population.weights, 10, replace=T), x))
}
my_means <- sapply(1:1, avg2)
my_means
my_means <- sapply(1:100, avg2)
my_means
my_means <- sapply(1:1000, avg2)
my_means
df <- data.frame(attempt = 1:1000, observed_average = my_means )
p5 <- ggplot(df, aes(x = attempt, y = observed_average))
p5 + geom_line() + expand_limits(y=c(50, 80))
avg2 <- function(x) {
sample.means <- numeric()
for (i in 1:x) {
sample.means <- append(sample.means, mean(sample(population.weights, 10, replace=T)))
}
mean(sample.means)
}
my_means <- sapply(1:1000, avg2)
my_means
df <- data.frame(attempt = 1:1000, observed_average = my_means )
p5 <- ggplot(df, aes(x = attempt, y = observed_average))
p5 + geom_line() + expand_limits(y=c(50, 80))
my_means <- sapply(1:100, avg2)
p5 <- ggplot(df, aes(x = attempt, y = observed_average))
p5 + geom_line() + expand_limits(y=c(50, 80))
p5 + geom_line()
df <- data.frame(attempt = 1:100, observed_average = my_means )
df
p5 <- ggplot(df, aes(x = attempt, y = observed_average))
p5 + geom_line() + expand_limits(y=c(50, 80))
population.weights <-rnorm(10000, 65, 10)
my_means <- sapply(1:100, avg2)
df <- data.frame(attempt = 1:100, observed_average = my_means )
p5 <- ggplot(df, aes(x = attempt, y = observed_average))
p5 + geom_line() + expand_limits(y=c(50, 80))
p5 + geom_line() + expand_limits(y=c(55, 75))
population.weights
draws = sample(population.weights, size = 10 * 100, replace = TRUE)
draws
draws = matrix(draws, 100)
draws
drawmeans = apply(draws, 2, mean)
drawmeans
draws = sample(population.weights, size = 10 , replace = TRUE)
draws = matrix(draws, 1)
draws
draws
drawmeans = apply(draws, 2, mean)
drawmeans
draws = sample(population.weights, size = 10 * 500 , replace = TRUE)
draws = matrix(draws, 10)
draws
drawmeans = apply(draws, 2, mean)
drawmeans
length(drawmeans)
hist(drawmeans, breaks = seq(50, 80, by = 5), main = "test")
hist(drawmeans, breaks = seq(50, 80, by = 1), main = "test")
draws = sample(population.weights, size = 10 * 10 , replace = TRUE)
draws = matrix(draws, 10)
drawmeans = apply(draws, 2, mean)
hist(drawmeans, breaks = seq(50, 80, by = 1), main = "test")
draws = sample(population.weights, size = 10 * 500 , replace = TRUE)
draws = matrix(draws, 10)
drawmeans = apply(draws, 2, mean)
drawmeans
hist(drawmeans, breaks = seq(50, 80, by = 1), main = "test")
draws = sample(population.weights, size = 10 * 10000 , replace = TRUE)
draws = matrix(draws, 10)
drawmeans = apply(draws, 2, mean)
length(drawmeans)
hist(drawmeans, breaks = seq(50, 80, by = 1), main = "test")
drawmeans
length(drawmeans)
drawmeans
draws
length(drawmeans)
drawmeans
drawmeans = apply(draws, 1, mean)
drawmeans
drawmeans = apply(draws, 2, mean)
drawmeans
draws = sample(population.weights, size = 10 * 10 , replace = TRUE)
draws
draws = matrix(draws, 10)
draws
draws = sample(population.weights, size = 10 * 10 , replace = TRUE)
draws
draws = matrix(draws, 10)
draws
draws.2 = sample(population.weights, size = 10 * 10 , replace = TRUE)
draws.2
draws.matrix = matrix(draws.2, 10, byrow = TRUE)
draws.matrix
drawmeans.2 = apply(draws.matrix, 2, mean)
drawmeans.2
hist(drawmeans.2, breaks = seq(50, 80, by = 1), main = "test")
draws.2 = sample(population.weights, size = 10 * 1000 , replace = TRUE)
# this populates matrix by row so each row is effectively a sample of 10 random weights
draws.matrix = matrix(draws.2, 10, byrow = TRUE)
drawmeans.2 = apply(draws.matrix, 2, mean)
drawmeans.2
length(drawmeans.2)
hist(drawmeans.2, breaks = seq(50, 80, by = 1), main = "test")
df2 <- data.frame(attempt=1:1000, observed_average = drawmeans.2)
df2
df
population.weights <-rnorm(10000, 65, 10)
my_means <- sapply(1:100, avg)
df <- data.frame(attempt = 1:100, observed_average = my_means )
df
hist(df$observed_average , breaks = seq(50, 80, by = 1), main = "test")
my_means <- sapply(1:1000, avg)
df <- data.frame(attempt = 1:100, observed_average = my_means )
df
df <- data.frame(attempt = 1:1000, observed_average = my_means )
df
hist(df$observed_average , breaks = seq(50, 80, by = 1), main = "test")
p5 <- ggplot(df, aes(x = attempt, y = observed_average))
p5 + geom_line() + expand_limits(y=c(55, 75))
draws.2 = sample(population.weights, size = 10 * 10000 , replace = TRUE)
draws.matrix = matrix(draws.2, 10, byrow = TRUE)
draws.matrix
drawmeans.2 = apply(draws.matrix, 2, mean)
drawmeans.2
summary(draws.matrix)
ncols(draws.matrix)
numcols(draws.matrix)
ncol(draws.matrix)
nrow(draws.matrix)
draws.2 = sample(population.weights, size = 10 * 20 , replace = TRUE)
draws.2
draws.matrix = matrix(draws.2, 10, byrow = TRUE)
draws.matrix
draws.2
draws.matrix = matrix(draws.2, 10, bycol = TRUE)
draws.matrix = matrix(draws.2, 10, byrow=FALSE)
draws.matrix
nrow(draws.matrix)
ncol(draws.matrix)
drawmeans.2 = apply(draws.matrix, 2, mean)
drawmeans.2
hist(drawmeans.2, breaks = seq(50, 80, by = 1), main = "test")
df2 <- data.frame(attempt=1:1000, observed_average = drawmeans.2)
p5 <- ggplot(df, aes(x = attempt, y = observed_average))
p5 + geom_line() + expand_limits(y=c(55, 75))
p5 <- ggplot(df2, aes(x = attempt, y = observed_average))
p5 + geom_line() + expand_limits(y=c(55, 75))
hist(df$observed_average , breaks = seq(50, 80, by = 1), main = "test")
p5 <- ggplot(df, aes(x = attempt, y = observed_average))
p5 + geom_line() + expand_limits(y=c(55, 75))
hist(df$observed_average , breaks = seq(50, 80, by = 1), main = "1000 samples of 10 weights")
draws.2 = sample(population.weights, size = 10 * 1000 , replace = TRUE)
# this populates matrix by row so each row is effectively a sample of 10 random weights
draws.matrix = matrix(draws.2, 10, byrow=FALSE)
nrow(draws.matrix) # 10 rows
ncol(draws.matrix) # 1000 columns
drawmeans.2 = apply(draws.matrix, 2, mean)
nrow(draws.matrix) # 10 rows
ncol(draws.matrix) # 1000 columns
length(drawmeans.2)
hist(drawmeans.2, breaks = seq(50, 80, by = 1), main = "test")
hist(drawmeans.2, breaks = seq(50, 80, by = 1), main = "1000 averages of 10 weight draws")
p5 <- ggplot(df2, aes(x = attempt, y = observed_average))
p5 + geom_line() + expand_limits(y=c(55, 75))
library(ggplot2)
bodies <- c(64, 1024, 4096, 16384)
values <- c(1.0,2.0,3.0)
df <- data.frame(bodies = bodies, values= values)
bodies <- c(64, 1024, 4096, 16384)
values <- c(1.0,2.0, 3.0, 4.5)
df <- data.frame(bodies = bodies, values= values)
df
qplot(df)
ggplot(data = df, aes(x=bodies, y=values)) +
geom_line()
rep(bodies, c("MP S", "MPI NS", "Hybrid NS"))
c(bodies, c("MP S", "MPI NS", "Hybrid NS"))
c('MP S', 'MPI NS', 'Hybrid NS')
rep(c('MP S', 'MPI NS', 'Hybrid NS'), c(4,4,4,4))
rep(c('MP S', 'MPI NS', 'Hybrid NS'), 2)
rep(c('MP S', 'MPI NS', 'Hybrid NS'), 4)
df <- data.frame(bodies = bodies, parallel.type = parallel.type, speedup=speedup)
bodies <- c(64, 1024, 4096, 16384)
parallel.type <- rep(c('MP S', 'MPI NS', 'Hybrid NS'), 4)
speedup <- c(1.14, 2.4, 1.09, 3.07, 3.95, 9.62, 11.57, 4.02, 10.98, 11.86, 4.01, 10.89)
df <- data.frame(bodies = bodies, parallel.type = parallel.type, speedup=speedup)
df
ggplot(data = df, aes(x=bodies, y=speedup, group =parallel.type)) +
geom_line()
ggplot(data = df, aes(x=bodies, y=speedup, group=parallel.type)) +
geom_line() +
geom_point()
ggplot(data = df, aes(x=bodies, y=speedup, group=parallel.type, colour=parallel.type)) +
geom_line() +
geom_point()
df
rep(bodies, 4)
rep(bodies, 4:4)
rep(bodies, 1:4)
rep(bodies, rep(4))
tmp <- c(4,6,3)
# 1e replicate tmp 10 times
tmp_4 <- rep(tmp, 10)
tmp_4
tmp_4mk2 <- rep(tmp_4, 1, len = 31 )
tmp_4mk2
rep(bodies,c(4,4,4,4))
df <- data.frame(bodies = rep(bodies,c(4,4,4,4)), parallel.type = parallel.type, speedup=speedup)
bodies <- c(64, 1024, 4096, 16384)
rep(bodies,c(3, 3, 3, 3))
parallel.type <- rep(c('MP S', 'MPI NS', 'Hybrid NS'), 4)
speedup <- c(1.14, 2.4, 1.09, 3.07, 3.95, 9.62, 11.57, 4.02, 10.98, 11.86, 4.01, 10.89)
df <- data.frame(bodies = rep(bodies,c(3, 3, 3, 3)), parallel.type = parallel.type, speedup=speedup)
df
ggplot(data = df, aes(x=bodies, y=speedup, group=parallel.type, colour=parallel.type)) +
geom_line() +
geom_point()
ggplot(data = df, aes(x=bodies, y=speedup, group=parallel.type, colour=parallel.type)) +
geom_line() +
geom_point() +
scale_x_continuous(formatter='log2')
ggplot(data = df, aes(x=bodies, y=speedup, group=parallel.type, colour=parallel.type)) +
geom_line() +
geom_point() +
scale_x_continuous(trans='log2')
library(scales)
ggplot(data = df, aes(x=bodies, y=speedup, group=parallel.type, colour=parallel.type)) +
geom_line() +
geom_point() +
scale_x_continuous(trans='log2',
breaks = trans_breaks("log2", function(x) 2^x),
)
ggplot(data = df, aes(x=bodies, y=speedup, group=parallel.type, colour=parallel.type)) +
geom_line() +
geom_point() +
scale_x_continuous(trans='log2',
breaks = trans_breaks("log2", function(x) 2^x),
) +
ggtitle("Average Speedup for Various Body n values")
ggplot(data = df, aes(x=bodies, y=speedup, group=parallel.type, colour=parallel.type)) +
geom_line() +
geom_point() +
scale_x_continuous(trans='log2',
breaks = trans_breaks("log2", function(x) 2^x),
) +
ggtitle("Average Speedup for Various Body n Values")
ggplot(data = df, aes(x=bodies, y=speedup, group=parallel.type, colour=parallel.type)) +
geom_line() +
geom_point() +
scale_x_continuous(trans='log2',
breaks = trans_breaks("log2", function(x) 2^x),
) +
ggtitle("Average Speedup for n Bodies")
ggplot(data = df, aes(x=bodies, y=speedup, group=parallel.type, colour=parallel.type)) +
geom_line() +
geom_point() +
scale_x_continuous(trans='log2',
breaks = trans_breaks("log2", function(x) 2^x),
) +
ggtitle("Average Speedup for n Bodies") +
labs(x="Bodies (Log 2 scale)")
ggplot(data = df, aes(x=bodies, y=speedup, group=parallel.type, colour=parallel.type)) +
geom_line() +
geom_point() +
scale_x_continuous(trans='log2',
breaks = trans_breaks("log2", function(x) 2^x),
) +
ggtitle("Average Speedup for n Bodies") +
labs(x="Bodies (Log 2 scale)", y="Speedup Factor")
unique(tennis.pe.all.year$SELECTION)
setwd("/home/jfarrugia/CourseWork/2017Sem02CourseWork/ICS5115/assignment")
all.tennis.files <- list.files("./stage", pattern = "(tennis_other.*)|(tennis_bfinf_other.*).csv")
all.tennis.files <- paste("stage", all.tennis.files, sep='/')
load.file.bulk <- function(tennis.file) {
tennis.df <- read.csv(tennis.file, skip = 1, header=TRUE, sep='|', stringsAsFactors = FALSE)
tennis.df <- tennis.df[tennis.df$EVENT == "Match Odds" & tennis.df$NUMBER_BETS >= 20 , ]
# change timestamp values from char to actual timestamps
#for (col in c("SETTLED_DATE", "DT.ACTUAL_OFF", "LATEST_TAKEN", "FIRST_TAKEN", "ACTUAL_OFF")) {
#  tennis.df[[col]] <- strptime(tennis.df[[col]], '%d-%m-%Y %H:%M:%S')
#}
# SCHEDULED_OFF does not feature seconds
#tennis.df$SCHEDULED_OFF <- strptime(tennis.df$SCHEDULED_OFF, '%d-%m-%Y %H:%M')
}
# create data.frame from all match odds pre-event data
tennis.pe.all <- ldply(all.tennis.files, load.file.bulk)
library(plyr)
load.file.bulk <- function(tennis.file) {
tennis.df <- read.csv(tennis.file, skip = 1, header=TRUE, sep='|', stringsAsFactors = FALSE)
tennis.df <- tennis.df[tennis.df$EVENT == "Match Odds" & tennis.df$NUMBER_BETS >= 20 , ]
# change timestamp values from char to actual timestamps
#for (col in c("SETTLED_DATE", "DT.ACTUAL_OFF", "LATEST_TAKEN", "FIRST_TAKEN", "ACTUAL_OFF")) {
#  tennis.df[[col]] <- strptime(tennis.df[[col]], '%d-%m-%Y %H:%M:%S')
#}
# SCHEDULED_OFF does not feature seconds
#tennis.df$SCHEDULED_OFF <- strptime(tennis.df$SCHEDULED_OFF, '%d-%m-%Y %H:%M')
}
# create data.frame from all match odds pre-event data
tennis.pe.all <- ldply(all.tennis.files, load.file.bulk)
nrow(tennis.pe.all) #roughly 486,000
tennis.pe.all <- filter(tennis.pe.all, startsWith(FULL_DESCRIPTION, "Group A"))
nrow(tennis.pe.all) #roughly 486,000
summary(tennis.pe.all)
filter
tennis.pe.all <- filter(tennis.pe.all, startsWith(FULL_DESCRIPTION, "Group A"))
unique(tennis.pe.all$FULL_DESCRIPTION)
filter(tennis.pe.all, startsWith(tennis.pe.all$FULL_DESCRIPTION, "Group A"))[1]
filter(tennis.pe.all, startsWith(FULL_DESCRIPTION, "Group A"), grepl("[0-9]+/.+", SETTLED_DATE))[1,]
tennis.pe.all <- filter(tennis.pe.all, startsWith(FULL_DESCRIPTION, "Group A"))
summary(tennis.pe.all)
filter(tennis.pe.all, startsWith(tennis.pe.all$FULL_DESCRIPTION, "Group A"))
dim(tennis.pe.all)
startsWith("hello world", "hello")
test<-filter(tennis.pe.all, startsWith(tennis.pe.all$FULL_DESCRIPTION, "Group A"))
test
test[1:4]
test[1:4,]
test<-""
filter(tennis.pe.all, startsWith(FULL_DESCRIPTION, "Group A"), grepl("[0-9]+/.+", SETTLED_DATE))[1,]
tennis.pe.all%>%
filter(startsWith(FULL_DESCRIPTION, "Group A"))
tennis.pe.all %>%
filter(startsWith(FULL_DESCRIPTION, "Group A"))
library(dplyr)
tennis.pe.all <- filter(tennis.pe.all, startsWith(FULL_DESCRIPTION, "Group A"))
nrow(tennis.pe.all) #roughly 486,000
for (col in c("SETTLED_DATE", "DT.ACTUAL_OFF", "LATEST_TAKEN", "FIRST_TAKEN","ACTUAL_OFF")) {
tennis.pe.all[[col]] <- as.POSIXct(strptime(tennis.pe.all[[col]], '%d-%m-%Y %H:%M:%S'))
}
tennis.pe.all$SCHEDULED_OFF <- as.POSIXct(astrptime(tennis.pe.all$SCHEDULED_OFF, '%d-%m-%Y %H:%M'))
tennis.pe.all$SCHEDULED_OFF <- as.POSIXct(strptime(tennis.pe.all$SCHEDULED_OFF, '%d-%m-%Y %H:%M'))
tennis.pe.all.year <- mutate(tennis.pe.all, year=format(SCHEDULED_OFF, "%Y"))
tennis.pe.all.year
nrow(tennis.pe.all.year)
tennis.pe.all.year <- tennis.pe.all.year[-which(desc.lengths > 5),]
desc.lengths <- sapply(tennis.pe.all.year$FULL_DESCRIPTION, function(x) { length(unlist(strsplit(x, "/"))) }, USE.NAMES = FALSE)
tennis.pe.all.year <- tennis.pe.all.year[-which(desc.lengths > 5),]
nrow(tennis.pe.all.year)
extract.tournament <- function (description) {
split.details <- unlist(strsplit(description, "/"))
tourney <- trimws(gsub("[0-9]+", "", split.details[2]))
}
extract.round <- function(description) {
split.details <- unlist(strsplit(description, "/"))
round.1 <- ifelse(length(split.details) == 3, "Unknown",
ifelse(length(split.details) == 4, split.details[3], split.details[4])
)
trimws(gsub("Matches", "", round.1))
}
extract.player <- function(description, index) {
split.details <- unlist(strsplit(description, "/"))
# the player pair usually found in the last token of the description field
player.pair <- split.details[length(split.details)]
trimws(gsub("[0-9.]", "", unlist(strsplit(player.pair, " v "))[index]) )
}
tennis.pe.all.year$tourney <- sapply(tennis.pe.all.year$FULL_DESCRIPTION, extract.tournament, USE.NAMES = FALSE)
tennis.pe.all.year$round <- sapply(tennis.pe.all.year$FULL_DESCRIPTION, extract.round, USE.NAMES = FALSE)
tennis.pe.all.year$player <- sapply(tennis.pe.all.year$FULL_DESCRIPTION, extract.player, 1, USE.NAMES =  FALSE)
tennis.pe.all.year$opponent <- sapply(tennis.pe.all.year$FULL_DESCRIPTION, extract.player, 2, USE.NAMES =  FALSE)
cut(tennis.pe.all$DT.ACTUAL_OFF, breaks='year')
atp.players <- read.csv("atp_players.csv", header=TRUE, sep=",")
ze.players <- unique(tennis.pe.all.year$player)
nrow(ze.players)
length(ze.players)
player.frame <- data.frame(player = ze.players)
nrow(player.frame)
nrow(atp.players)
atp.players$dob <- as.POSIXct(strptime(atp.players$dob, '%Y%m%d'))
atp.players$dob
atp.players$dob <- as.Date(strptime(atp.players$dob, '%Y%m%d'))
atp.players$dob
atp.players <- read.csv("atp_players.csv", header=TRUE, sep=",")
atp.players$dob <- as.Date(strptime(atp.players$dob, '%Y%m%d'))
atp.players$dob
atp.players$dob >= '1970/1/1'
atp.players[is.na(atp.players$dob]
atp.players[is.na(atp.players$dob)]
atp.players[is.na(atp.players$dob),]
nrow(atp.players[is.na(atp.players$dob),])
nrow(atp.players)
nrow(atp.players[atp.players$dob >= '1 Jan 1970',])
nrow(atp.players[atp.players$dob >= '1970/1/1',])
atp.players[atp.players$dob >= '1970/1/1',])
atp.players[atp.players$dob >= '1970/1/1',]
nrow(atp.players[atp.players$dob >= '1970/1/1',])
