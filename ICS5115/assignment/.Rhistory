sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
# calculate mean roi over all attempts
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds))
n_sample <- 200
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:20, place_bets, betting.set, n_sample, kelly_wager, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
# calculate mean roi over all attempts
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds))
n_sample <- 500
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:20, place_bets, betting.set, n_sample, kelly_wager, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
# calculate mean roi over all attempts
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds))
betting.set <-
#atp.elo.totals.test %>%
atp.elo.totals.valid %>%
filter(tourney_level %in% c('250 or 500', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters'),
#selection_elo_prediction >= 0.6, selection_elo_prediction > imputed_probability) %>%
#selection_elo_prediction >= 0.63, selection_elo_prediction > imputed_probability) %>%
selection_elo_prediction >= 0.63, (selection_elo_prediction - imputed_probability) > 0  &
(selection_elo_prediction - imputed_probability) <= 0.25) %>%
select(year, event_id, tourney_level, event_schedule_date,
player, opponent, selection, weighted_odds, imputed_probability, selection_elo_prediction, is_win) %>%
arrange(event_schedule_date) %>%
as.data.frame
n_sample <- 500
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:20, place_bets, betting.set, n_sample, kelly_wager, 0.1)
n_sample <- 90
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, kelly_wager, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
n_sample <- 90
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, kelly_wager, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
n_sample <- 90
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, fixed, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
betting.set %>%
group_by(is_win) %>%
summarise(cnt=n()) %>%
spread(is_win,cnt ) %>%
mutate(perc_win = `1` / (`1` + `0`))
betting.set
betting.set %>%
group_by(is_win) %>%
summarise(cnt=n()) %>%
spread(is_win,cnt ) %>%
mutate(perc_win = `1` / (`1` + `0`))
n_sample <- 90
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, fixed_wager, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
# calculate mean roi over all attempts
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds))
n_sample <- 90
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, kelly_wager, 0.5)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
# calculate mean roi over all attempts
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds))
n_sample <- 90
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, kelly_wager, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
# calculate mean roi over all attempts
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds))
betting.set
betting.set %>%
group_by(is_win) %>%
summarise(cnt=n()) %>%
spread(is_win,cnt ) %>%
mutate(perc_win = `1` / (`1` + `0`))
qplot(x=bet_count, y=bank, data=df, geom="line",facets=(~attempt), xlab="Bet #", ylab = "Bank (â‚¬)", main="Bank Roll Projection" )
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds))
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
n_sample <- 500
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:20, place_bets, betting.set, n_sample, kelly_wager, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
# calculate mean roi over all attempts
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds))
betting.set <-
atp.elo.totals.test %>%
#atp.elo.totals.valid %>%
filter(tourney_level %in% c('250 or 500', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters'),
#selection_elo_prediction >= 0.6, selection_elo_prediction > imputed_probability) %>%
#selection_elo_prediction >= 0.63, selection_elo_prediction > imputed_probability) %>%
selection_elo_prediction >= 0.63, (selection_elo_prediction - imputed_probability) > 0  &
(selection_elo_prediction - imputed_probability) <= 0.25) %>%
select(year, event_id, tourney_level, event_schedule_date,
player, opponent, selection, weighted_odds, imputed_probability, selection_elo_prediction, is_win) %>%
arrange(event_schedule_date) %>%
as.data.frame
n_sample <- 500
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:20, place_bets, betting.set, n_sample, kelly_wager, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
# calculate mean roi over all attempts
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds))
atp.elo.totals.test %>%
filter(tourney_level %in% c('250 or 500', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters'), is_win==1) %>%
#filter(tourney_level %in% c('Grand Slams'), is_win==1) %>%
summarise(mean(selection_elo_prediction), mean(imputed_probability), sd(selection_elo_prediction), sd(imputed_probability))
atp.elo.totals.test %>%
filter(tourney_level %in% c('250 or 500', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters'),
imputed_probability >= 0.62) %>%
#selection_elo_prediction >= 0.64) %>%
group_by(tourney_level, is_win) %>%
summarise(cnt=n()) %>%
spread(is_win,cnt ) %>%
mutate(perc_win = `1` / (`1` + `0`))
atp.elo.totals.test %>%
filter(tourney_level %in% c('250 or 500', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters'),
imputed_probability >= 0.62) %>%
#selection_elo_prediction >= 0.64) %>%
#group_by(tourney_level, is_win) %>%
group_by(is_win) %>%
summarise(cnt=n()) %>%
spread(is_win,cnt ) %>%
mutate(perc_win = `1` / (`1` + `0`))
atp.elo.totals.test %>%
filter(tourney_level %in% c('250 or 500', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters'),
imputed_probability >= 0.61) %>%
#selection_elo_prediction >= 0.64) %>%
#group_by(tourney_level, is_win) %>%
group_by(is_win) %>%
summarise(cnt=n()) %>%
spread(is_win,cnt ) %>%
mutate(perc_win = `1` / (`1` + `0`))
nrow(atp.elo.totals.test)
atp.elo.totals.test %>%
filter(tourney_level %in% c('250 or 500', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters'), is_win==1) %>%
#filter(tourney_level %in% c('Grand Slams'), is_win==1) %>%
summarise(mean(selection_elo_prediction), mean(imputed_probability), sd(selection_elo_prediction), sd(imputed_probability))
atp.elo.totals.test %>%
filter(tourney_level %in% c('250 or 500', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters'),
#imputed_probability >= 0.61) %>%
selection_elo_prediction >= 0.64) %>%
#group_by(tourney_level, is_win) %>%
group_by(is_win) %>%
summarise(cnt=n()) %>%
spread(is_win,cnt ) %>%
mutate(perc_win = `1` / (`1` + `0`))
atp.elo.totals.test %>%
filter(tourney_level %in% c('250 or 500', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters'),
#imputed_probability >= 0.61) %>%
selection_elo_prediction >= 0.62) %>%
#group_by(tourney_level, is_win) %>%
group_by(is_win) %>%
summarise(cnt=n()) %>%
spread(is_win,cnt ) %>%
mutate(perc_win = `1` / (`1` + `0`))
atp.elo.totals.test %>%
filter(tourney_level %in% c('250 or 500', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters'), is_win==1) %>%
#filter(tourney_level %in% c('Grand Slams'), is_win==1) %>%
summarise(mean(selection_elo_prediction), mean(imputed_probability), sd(selection_elo_prediction), sd(imputed_probability))
atp.elo.totals.test %>%
filter(tourney_level %in% c('250 or 500', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters'),
imputed_probability >= 0.63) %>%
#selection_elo_prediction >= 0.62) %>%
#group_by(tourney_level, is_win) %>%
group_by(is_win) %>%
summarise(cnt=n()) %>%
spread(is_win,cnt ) %>%
mutate(perc_win = `1` / (`1` + `0`))
n_sample <- 2000
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, kelly_wager, 0.1)
n_sample <- 1022
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, kelly_wager, 0.1)
nrow(df)
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds))
betting.set <-
#atp.elo.totals.test %>%
atp.elo.totals.valid %>%
filter(tourney_level %in% c('250 or 500', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters'),
#selection_elo_prediction >= 0.6, selection_elo_prediction > imputed_probability) %>%
#selection_elo_prediction >= 0.63, selection_elo_prediction > imputed_probability) %>%
selection_elo_prediction >= 0.63, (selection_elo_prediction - imputed_probability) > 0  &
(selection_elo_prediction - imputed_probability) <= 0.25) %>%
select(year, event_id, tourney_level, event_schedule_date,
player, opponent, selection, weighted_odds, imputed_probability, selection_elo_prediction, is_win) %>%
arrange(event_schedule_date) %>%
as.data.frame
betting.set <-
#atp.elo.totals.test %>%
atp.elo.totals.valid %>%
filter(tourney_level %in% c('250 or 500', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters'),
#selection_elo_prediction >= 0.6, selection_elo_prediction > imputed_probability) %>%
#selection_elo_prediction >= 0.63, selection_elo_prediction > imputed_probability) %>%
selection_elo_prediction >= 0.63, (selection_elo_prediction - imputed_probability) > 0  &
(selection_elo_prediction - imputed_probability) <= 0.25) %>%
select(year, event_id, tourney_level, event_schedule_date,
player, opponent, selection, weighted_odds, imputed_probability, selection_elo_prediction, is_win) %>%
arrange(event_schedule_date) %>%
as.data.frame
n_sample <- 90
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, kelly_wager, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
# calculate mean roi over all attempts
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds))
# plot each attempt in its own facet
qplot(x=bet_count, y=bank, data=df, geom="line",facets=(~attempt), xlab="Bet #", ylab = "Bank (â‚¬)", main="Bank Roll Projection" )
betting.set <-
#atp.elo.totals.test %>%
atp.elo.totals.valid %>%
filter(tourney_level %in% c('250 or 500', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters'),
selection_elo_prediction >= 0.6, selection_elo_prediction > imputed_probability) %>%
#selection_elo_prediction >= 0.63, selection_elo_prediction > imputed_probability) %>%
#selection_elo_prediction >= 0.63, (selection_elo_prediction - imputed_probability) > 0  &
#                                 (selection_elo_prediction - imputed_probability) <= 0.25) %>%
select(year, event_id, tourney_level, event_schedule_date,
player, opponent, selection, weighted_odds, imputed_probability, selection_elo_prediction, is_win) %>%
arrange(event_schedule_date) %>%
as.data.frame
n_sample <- 100
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, kelly_wager, 0.1)
n_sample <- 200
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, kelly_wager, 0.1)
n_sample <- 106
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, kelly_wager, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
# calculate mean roi over all attempts
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds))
qplot(x=bet_count, y=bank, data=df, geom="line",facets=(~attempt), xlab="Bet #", ylab = "Bank (â‚¬)", main="Bank Roll Projection" )
n_sample <- 100
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, kelly_wager, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
# calculate mean roi over all attempts
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds))
betting.set <-
#atp.elo.totals.test %>%
atp.elo.totals.valid %>%
filter(tourney_level %in% c('250 or 500', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters'),
#selection_elo_prediction >= 0.6, selection_elo_prediction > imputed_probability) %>%
#selection_elo_prediction >= 0.63, selection_elo_prediction > imputed_probability) %>%
selection_elo_prediction >= 0.63, (selection_elo_prediction - imputed_probability) > 0  &
(selection_elo_prediction - imputed_probability) <= 0.25) %>%
select(year, event_id, tourney_level, event_schedule_date,
player, opponent, selection, weighted_odds, imputed_probability, selection_elo_prediction, is_win) %>%
arrange(event_schedule_date) %>%
as.data.frame
n_sample <- 100
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, kelly_wager, 0.1)
n_sample <- 90
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, kelly_wager, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
# calculate mean roi over all attempts
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds))
betting.set <-
atp.elo.totals.test %>%
#atp.elo.totals.valid %>%
filter(tourney_level %in% c('250 or 500', 'Davis Cup', 'Tour Finals', 'Grand Slams', 'Masters'),
#selection_elo_prediction >= 0.6, selection_elo_prediction > imputed_probability) %>%
#selection_elo_prediction >= 0.63, selection_elo_prediction > imputed_probability) %>%
selection_elo_prediction >= 0.63, (selection_elo_prediction - imputed_probability) > 0  &
(selection_elo_prediction - imputed_probability) <= 0.25) %>%
select(year, event_id, tourney_level, event_schedule_date,
player, opponent, selection, weighted_odds, imputed_probability, selection_elo_prediction, is_win) %>%
arrange(event_schedule_date) %>%
as.data.frame
n_sample <- 2000
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, kelly_wager, 0.1)
n_sample <- 1022
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, kelly_wager, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
# calculate mean roi over all attempts
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds))
summary(atp.matches.elo$days_elapsed)
sd(atp.matches.elo$days_elapsed)
pt(1.76, 499, lower.tail=FALSE)
qt(0.95, 499)
pt(1.76, 499, lower.tail=FALSE)
write.table(atp.elo.totals, file="atp_elo_totals.csv", sep = "|", row.names = FALSE)
estimated.t.test <- function(n, roi, mean_odds) {
(sqrt(n) * (roi - 1)) / sqrt(roi * (mean_odds - roi))
}
estimated.t.test(500, 1.06, 1.43)
pt(2.14, 499, lower.tail=FALSE)
estimated.t.test <- function(n, roi, mean_odds) {
t <- (sqrt(n) * (roi - 1)) / sqrt(roi * (mean_odds - roi))
pt(t, n-1, lower.tail=FALSE)
}
n_sample <- 1022
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:1, place_bets, betting.set, n_sample, kelly_wager, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds))
bet.stats <-
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean(roi), mean(mean_odds)) %>%
as.data.frame
bet.stats <-
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean_roi=mean(roi), mean_odds=mean(mean_odds)) %>%
as.data.frame
estimated.t.test(1+bet.stats$mean_roi, bet.stats$mean_odds)
estimated.t.test(n_sample, 1+bet.stats$mean_roi, bet.stats$mean_odds)
1-estimated.t.test(n_sample, 1+bet.stats$mean_roi, bet.stats$mean_odds)
estimated.t.test(n_sample, 1+bet.stats$mean_roi, bet.stats$mean_odds)
n_sample <- 500
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:20, place_bets, betting.set, n_sample, kelly_wager, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
# calculate mean roi over all attempts
bet.stats <-
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean_roi=mean(roi), mean_odds=mean(mean_odds)) %>%
as.data.frame
bet.stats
estimated.t.test(n_sample, 1+bet.stats$mean_roi, bet.stats$mean_odds)
n_sample <- 500
# run 10 attempts - bet a maximum of 10%.  Less if the edge is not sufficiently wide
df <- ldply(1:20, place_bets, betting.set, n_sample, kelly_wager, 0.1)
sum(df$won - df$wager)/sum(df$wager)
mean(df$odds)
# calculate average bank roll after betting over all attempts
df %>%
filter(bet_count == n_sample) %>%
summarise(avg_bank = mean(bank))
# calculate mean roi over all attempts
bet.stats <-
df %>%
group_by(attempt) %>%
summarise(roi = (sum(won) - sum(wager)) / sum(wager), mean_odds = mean(odds)) %>%
summarise(mean_roi=mean(roi), mean_odds=mean(mean_odds)) %>%
as.data.frame
# statistical signifance based on t-test
estimated.t.test(n_sample, 1+bet.stats$mean_roi, bet.stats$mean_odds)
bet.stats
estimated.t.test(500, 1.05, 1.436)
estimated.t.test(500, 1.06, 1.43)
estimated.t.test <- function(n, roi, mean_odds) {
t <- (sqrt(n) * (roi - 1)) / sqrt(roi * (mean_odds - roi))
print(t)
pt(t, n-1, lower.tail=FALSE)
}
estimated.t.test(500, 1.05, 1.436)
version()
R.version()
version
?runif
runif(20)
runif(20, 0, 1)
ifelse(runif(20, 0, 1) > 0.5, 'H', 'T')
